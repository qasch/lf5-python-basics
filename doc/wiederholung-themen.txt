## Variablen

## Name einer Variablen -> Bezeichner / Symbol
# - erlaubt sind Buchstaben und Zahlen, keine Sonderzeichen
# - obwohl Umlaute grundsätzlich erlaubt sind, sollten diese
#   unbedingt vermieden werden (ü -> ue, ä -> ae etc.)
# - ausser dem Unterstrich (auch am Anfang eines Bezeichners)
# - Zahlen dürfen nicht am Anfang stehen

# Variablen kann ein Wert zugewiesen werden
# -> erfolgt über den Zuweisungsoperator =
# Variablen können im Laufe des Programms verschiedene Werte annehmen:

# Zuweisung:
meine_variable = "wert"     # <- gesamte Zeile ist ein Ausdruck
# Bezeichner   Zuweisungsoperator  Literal

# Variablen können nicht nur einzelne fixe Werte aufnehmen,
# sondern auch ganze Ausdrücke:
ergebnis = 3 + 5
# diese Ausdrücke können auch Variablen sein:
ergebnis = zahl + nummer * 3

# auch die Rückgabe/das Ergebnis einer Funktion kann in einer Variable
# gespeichert werden:
user_input = input("Bitte etwas eingeben: ")
laenge_input_string = len(usr_input)

## Datentypen

# Beispiele für Zuweisungen:
ganze_zahl = 8         # 8 ist ein Integer (ganze Zahl)
komma_zahl = 3.234     # 3.234 ist ein Float (Gleitkommazahl)
                       # hier ist der Punkt (.) der Dezimaltrenner und
                       # nicht das Komma (,)
text = "irgendwas"     # "irgendwas" ist ein String (Zeichenkette)
wahrheitswert = True   # True ist ein Boolean (Wahrheitswert: entweder True (wahr) oder False (falsch)


## Casting

# Mittels Casting kann ein Datentyp in einen anderen umgewandelt werden
# funktioniert nicht immer, die Datentypen müssen hierfür "passen"
# Casting von int nach float:
mein_int = 5
print(mein_int)
# >>> 5   (Integer)
mein_float = float(mein_int)
print(mein_float)
# >>> 5.0  (Float)
mein_string = str(mein_int)
print(mein_string)
# >>> '5'   (String)

# Das geht z.B. nicht:
mein_satz = "Ich kann nicht in einen Integer gecastet werden"
int_satz = int(mein_satz)  # -> führt zu einem Fehler im Programm

# Datentyp ermitteln:
# Builtin type()

print(type(mein_string))
# >>> <class 'str'>

# Debuggingstatement, wichtig zur Codeanalyse/Fehlersuche

# Builtins / Funktionen:
# - sind in Python eingebaute und diret verfügbare Funktionen
# - können unabhängig von einem Objekt verwendet werden
# Beispiele:
print()
input()
type()
len()
int()
float()
...

# - nehmen in der Regel Parameter/Argumente entgegen
# Inhalt von mein_satz ausgeben
print(mein_satz)         # mein_satz ist der Parameter/das Argument
# Länge des Strings mein_string ermitteln (aber nicht ausgeben!)
len(mein_string)         # mein_string ist der Parameter/das Argument
print(len(mein_string))  # Länge von mein_string ermitteln UND ausgeben

## Stringmethoden

# Methoden können im Gegensatz zu Funktionen nicht einfach so aufgerufen werden,
# sie werden über die Punktnotation durch ein Objekt aufgerufen:
mein_string.upper()     # alle Buchstaben GROSS schreiben
mein_string.lower()     # alle Buchstaben klein schreiben

# Hinweis: in IDLE oder PyCharm kann man sich die verfügbaren Methoden anzeigen
#          lassen, indem man hinter ein Objekt einen Punkt schreibt und in IDLE
#          STRG+SPACE drückt. In PyCharm passiert das nach einer kurzen Wartezeit

# Fehler:
upper(mein_string)    # geht so NICHT! upper() ist eine Methode der Klasse String
                      # und keine Funktion oder Builtin

# Es gibt natürlich nicht nur String Methoden, sondern jede Klasse in Java bringt
# ihre eigenen Methoden mit.

## Strings Indexing
# Über Indexing kann auf ein einzelnes Element (in diesem Fall ein Buchstabe) des
# String Objekts zugegriffen werden:

mein_string = 'Python'
print(mein_string[0])
# >>> P
print(mein_string[3])
# >>> h
# Wir können auch von hinten anfangen zu zählen:
print(mein_string[-1])
# >>> n
print(mein_string[-3])
# >>> h
# Beim Versuch, auf einen Index zuzugreifen der nicht existiert,
# kommt es zu einem Fehler/einer Exception:
print(mein_string[10])
# FEHLER: Index out of range Exception


# WICHTIG: Computer fangen in der Regel bei 0 an zu zählen!
# Genauer: Die einzelnen Elemente werden über ihren Index angesprochen.
# Der Index startet bei 0
# Oben wird der Index in die eckigen Klammern ([]) geschrieben


# String Slicing

# Mittels Slicing kann eine Abfolge von Elementen (Buchstaben) aus einem
# String ausgeschnitten werden.
# Syntax: str[start:ende]
# start ist inklusive (wird mit ausgegeben)
# ende ist exklusive  (wird nicht mit ausgegeben)
mein_string = "Slicing"
# Index:       0123456
print(mein_string[0:3])    # Achtung: 3 ist exklusive/nicht enthalten!
# >>> 'Sli'
print(mein_string[:1])
# >>> 'S'
print(mein_string[4:6])
# >>> 'in'
# liegt das Ende aussehalb des Bereichs,
# kommt es nicht zu einem Fehler!
# Unterschied zum Indexing!
print(mein_string[4:600])
# >>> 'in'
print(mein_string[4:])
# >>> 'in'

# Verzweigungen
# Dienen dazu, den Programmablauf / Flow zu steuern
# Das Schlüsselwort/Keyword if leitet einen Programmabschnitt ein,
# der nur unter einer bestimmten Bedingung ausgeführt wird.
zahl = 5
if zahl < 10:                              # Bedingung ist wahr/liefert True zurück
    print(f"{zahl} ist kleiner als 10")    # Codeblock wird ausgeführt
    print("Ich gehöre mit zum Codeblock")
# >>> 5 ist kleiner als 10
# >>> Ich gehöre mit zum Codeblock

if zahl > 10:                              # Bedingung ist falsch/liefert False zurück
    print(f"{zahl} ist kleiner als 10")    # Codeblock wird nicht ausgeführt
    print("Ich gehöre mit zum Codeblock")
# >>>                                      # keine Ausgabe

# Syntax:
#if Bedingung:
#    auszuführender
#    Codeblock

# else

zahl = 5
if zahl > 10:                              # Bedingung ist falsch/liefert False zurück
    print(f"{zahl} ist kleiner als 10")    # Codeblock wird nicht ausgeführt
    print("Ich gehöre mit zum Codeblock")
else:                                      # dafür aber dieser hier
    print("Ich werde nur ausgegeben, wenn die Bedingung falsch ist")
# >>> Ich werde nur ausgegeben, wenn die Bedingung falsch ist


# elif   ("else if" abgekürzt)
zahl = -1
if zahl > 0:                              # Bedingung ist falsch/liefert False zurück
    print(f"{zahl} ist positiv")          # Codeblock wird nicht ausgeführt
    print("Ich gehöre mit zum Codeblock")
elif zahl < 0:                            # diese Bedingung ist wahr
    print(f"{zahl} ist negativ")          # Codeblock wird ausgeführt
else:                                     # da elif Block wahr, wird else Block nicht ausgeführt
    print(f"{zahl} ist Null")             # Codeblock wird nicht ausgeführt


# Codeblock / Indentation
# Codeblöcke werden in Python ausschliesslich durch Einrückungen gekennzeichnet,
# nicht wie in anderen Programmiersprachen durch z.B. geschweifte Klammern {}.
# Beispiel Java:
if(zahl > 0) {
  print("Zahl ist positiv")
  print("Ich gehöre mit zum Codeblock")
}
# Beispiel Python:
if zahl > 0:
    print("Zahl ist positiv")
    print("Ich gehöre mit zum Codeblock")

# Codeblöcke werden standardmässig um 4 Leerschritte eingerückt
# Eine Einrücktiefe von 2 Leerschritten ist ebenso verbreitet und okay
# Obwohl auch Einrücktiefen von z.B. 3 theoretisch möglich sind, ist dringend
# davon abzuraten!
# In jedem Fall muss die Einrücktiefe innerhalt eines Blocks gleich sein.



# String Konkatenation
# Um mehrere Strings oder Strings und Variablen miteinander zu verbinden,
# kann z.B. die String-Konkatenation genutzt werden.
# Hierbei dient das '+' Zeichen als Verbindungsoperator:
name = "Peter"

# Wir möchten den String "Hallo Peter" ausgeben
print("Hallo " + name)
# >>> 'Hallo Peter'

# Simpelste Art, Variabeln und Strings zu verknüpfen,
# allerdings etwas umständlich und fehleranfällig:
alter = 23

# Wir wollen folgenden String ausgeben "Hallo Peter, du bist 23 Jahre alt":
print("Hallo " + name + " du bist " + alter)     # FEHLER!
# >>> TypeError: can only concatenate str (not "int") to str

# Lösungen:
# 1.:    alter = '23'    # Zahl als String repräsentieren
#  Schwachstellt dabei: Wir könnten damit nicht rechnen.
# 2.: Integer nach String casten:
print("Hallo " + name + " du bist " + str(alter))     # so funktioniert es

# F-String
# Sind die aktuellste und beste Art, formatierte Strings  auszugeben,
# oder Strings und Variablen zu verknüpfen
print(f"Hallo {name} du bist {alter}")


# Funktionen erstellen
# Funktionen dienen dazu:
# - einzelne Programmteile zusammenzufassen
# - diese können an anderer Stelle (auch mehrfach) aufgerufen werden
# - Code wird strukturierter/übersichtlicher
# - Redundanzen (Wiederholungen) können so vermieden werden
# - Code kann wiederverwendet werden
# - kann man als ein "Unterprogramm" verstehen

# Funktionen werden durch das Schlüsslewort `def` eingeleitet

# Funkionsdefinition
def sag_hallo():
    print("Hallo")

# Funkionsaufruf
sag_hallo()
# >>> 'Hallo'

# Durch Parameter/Argumente kann eine Funktion variabler werden:
# Funkionsdefinition
def sag_hallo(name):
    print(f"Hallo {name}")

# Funkionsaufruf
sag_hallo('Peter')
# >>> 'Hallo Peter'

# Funktionen müssen sowohl erstellt / definiert werden
# Um sie zu nutzen, müssen sie zusätzlich aufgerufen werden!

# Wird eine Funktion so definiert, dass sie eine bestimmmte Anzahl an
# Parametern entgegennimmt, so muss die Funktion auch mit exakt dieser
# Anzahl an Parametern aufgerufen werden.


## Schleifen / Loops
# Schleifen führen einen bestimmten Codeblock mehrfach bis zum
# Eintreten einer sog. Abbruchbedingung aus

# In Python gibt es zwei Arten von Schleifen: `while` und `for` Schleife

# while
x = 110
while x < 10:             # x < 10 ist die zu prüfende Bedingung
    print(x, sep=" ")     # dieser Block wird wiederholt ausgeführt
    x = x + 1             # Wichtig, damit wir keine Endlosschleife bauen! -> Inkrement
#   x += 1                # ist der Ausdruck wie eine Zeile darüber

# >>> 0 1 2 3 4 5 6 7 8 9

# sep=" " sorgt dafür, dass print keine Zeilenumbruch durchführt, sondern
# anstatt dessen ein Leerzeichen einfügt

# Bei der while Schleife ist es sehr wichtig darauf zu achten, dass die
# Abbruchbedingung auch eintritt.
# Ansonsten kommt es zu einer sog. Endlosschleife, der Schleifenrumpf wird
# also theoretisch unendlich oft ausgeführt und das Programm bleibt "hängen".
# Endlosschleifen können unter bestimmten Bedingungen aber auch erwünscht sein,
# z.B. wiederholte Aufforderung zur Benutzereingabe etc.
# Hier gibt es dann andere Möglickkeiten, die Schleife zu verlassen (`break`, `continue`)

# for
# Die for Schleife kann nur auf sog. *Iterables*, also iterierbare Objekte angewandt
# werden. Damit sind Datenstrukturen gemeint, die mehrere Elemente enthalten, wie z.B.
# einen String, eine List etc.
# Es wird kein Inkrement benötigt, die Schleife "weiss" selbst, wann sie aufhören muss.
# Alles, was mit einer for Schleife geht, ist auch mit einer while Schleife möglich, die
# for Schleife ist in vielen Fällen aber komfortabler und kürzer
for letter in "Python":
    print(letter)

# >>> P
# >>> y
# >>> t
# >>> h
# >>> o
# >>> n

# `letter` ist hier ein frei gewählter Name, über den das entsprechende Element (pro
# Schleifendurchlauf also das nächste Element) innerhalb des Rumpfs angesprochen/genutzt
# werden kann.

# Eine *Zählschleife* kann über die Funktion `range()` realisiert werden:

for num in range(1, 6):
    print(num, sep=", ")

# >>> '1, 2, 3, 4, 5'

# Genau wie beim *Slicing* ist auch bei `range()` der Start inklusive und das Ende exklusive.


# Exceptions